import {
  FileSearchOutlined,
  LoadingOutlined,
  TableOutlined,
  UploadOutlined,
} from '@ant-design/icons'
import { Button, Col, Row, Select, Steps, Typography, message, theme } from 'antd'
import Head from 'next/head'
import { useCallback, useMemo, useState } from 'react'
import Layout from '~/components/Layout'
import PredictJPEG from '~/components/PredictJPEG'
import PredictionTable from '~/components/PredictionTable'
import UploadPDF from '~/components/UploadPDF'
import type {
  DrawingComponent,
  LineType,
  MissingComponent,
  RemainingComponent,
} from '~/models/drawings.model'

export default function Home() {
  // hooks
  const [imageFile, setImageFile] = useState<File | null>(null)
  const [lineTypes, setLineTypes] = useState<LineType[]>([])
  const [drawingComponents, setDrawingComponents] = useState<DrawingComponent[]>([])
  const [missingComponents, setMissingComponents] = useState<MissingComponent[]>([])
  const [remainingComponents, setRemainingComponents] = useState<RemainingComponent[]>([])
  const { token } = theme.useToken()
  const [current, setCurrent] = useState(0)
  const [isLoading, setIsLoading] = useState(false)

  // handlers
  const next = useCallback(() => {
    setCurrent(current + 1)
  }, [current])
  const prev = () => {
    setCurrent(current - 1)
  }
  const handleChange = (value: string) => {
    console.log(`selected ${value}`)
  }
  const handleChangeStep = (current: number) => {
    setCurrent(current)
  }

  const steps = useMemo(
    () => [
      {
        title: 'Upload Drawing',
        icon: current === 0 && isLoading ? <LoadingOutlined /> : <UploadOutlined />,
        content: (
          <>
            {/* Select the type of drawing */}
            <Col
              span={24}
              style={{
                textAlign: 'center',
              }}>
              <Typography.Title level={4}>Select the type of drawing</Typography.Title>
              <Select
                defaultValue="mt"
                onChange={handleChange}
                options={[
                  { value: 'mt', label: 'Main & Transfer' },
                  { value: 'h', label: 'H-config' },
                  { value: 'bh', label: 'Breaker & a Half' },
                  { value: 'dbsb', label: 'Double Bus Single Breaker' },
                ]}
              />
            </Col>

            {/* Upload a PDF file*/}
            <Col
              span={24}
              style={{
                textAlign: 'center',
              }}>
              <UploadPDF
                imageFile={imageFile}
                setImageFile={setImageFile}
                next={next}
                isLoading={isLoading}
                setIsLoading={setIsLoading}
              />
            </Col>
          </>
        ),
      },
      {
        title: 'Predict & Diagnose',
        icon: current === 1 && isLoading ? <LoadingOutlined /> : <FileSearchOutlined />,
        content: (
          <>
            {/* Send to prediction */}
            <Col
              span={6}
              style={{
                textAlign: 'center',
              }}>
              <PredictJPEG
                imageFile={imageFile}
                lineTypes={lineTypes}
                setLineTypes={setLineTypes}
                drawingComponents={drawingComponents}
                setDrawingComponents={setDrawingComponents}
                missingComponents={missingComponents}
                setMissingComponents={setMissingComponents}
                remainingComponents={remainingComponents}
                setRemainingComponents={setRemainingComponents}
                isLoading={isLoading}
                setIsLoading={setIsLoading}
              />
            </Col>
          </>
        ),
      },
      {
        title: 'Display Results',
        icon: current === 2 && isLoading ? <LoadingOutlined /> : <TableOutlined />,
        content: (
          <>
            {/* Display prediction */}
            <Col
              span={24}
              style={{
                textAlign: 'center',
              }}>
              <PredictionTable
                lineTypes={lineTypes}
                setLineTypes={setLineTypes}
                drawingComponents={drawingComponents}
                setDrawingComponents={setDrawingComponents}
                missingComponents={missingComponents}
                setMissingComponents={setMissingComponents}
                remainingComponents={remainingComponents}
                setRemainingComponents={setRemainingComponents}
              />
            </Col>
          </>
        ),
      },
    ],
    [
      current,
      drawingComponents,
      imageFile,
      isLoading,
      lineTypes,
      missingComponents,
      next,
      remainingComponents,
    ],
  )
  const items = steps.map((item) => ({ key: item.title, title: item.title }))

  return (
    <Layout>
      <Head>
        <title>ASDR: Home</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Row justify="center" align="middle">
        {/* Title */}
        <Col span={24}>
          <Typography.Title level={4}>Diagnose a Drawing</Typography.Title>
        </Col>
      </Row>

      <Row justify="center" align="middle" style={{ width: '100%' }}>
        {/* Steps */}
        <>
          <Steps current={current} items={items} onChange={handleChangeStep} />
          <Row
            justify="center"
            align="top"
            gutter={[16, 16]}
            style={{
              // minHeight: 600,
              marginTop: 16,
              padding: 16,
              width: '100%',
              borderRadius: token.borderRadiusLG,
              border: `1px dashed ${token.colorBorder}`,
              alignContent: 'flex-start',
            }}>
            {steps[current]?.content}
          </Row>

          {/* <Row
            justify="space-between"
            align="middle"
            gutter={[16, 16]}
            style={{
              padding: 16,
              width: '100%',
            }}>
            <Col>
              {current > 0 && (
                <Button style={{ margin: '0 8px' }} onClick={() => prev()}>
                  Previous
                </Button>
              )}
            </Col>

            <Col>
              {current === steps.length - 1 ? (
                <Button type="primary" onClick={() => void message.success('Processing complete!')}>
                  Done
                </Button>
              ) : (
                <Button type="primary" onClick={() => next()}>
                  Next
                </Button>
              )}
            </Col>
          </Row> */}
        </>
      </Row>
    </Layout>
  )
}

// <Row justify="center" align="middle" gutter={[16, 16]}>
//   {/* Select the type of drawing */}
//   <Col
//     span={24}
//     style={{
//       textAlign: 'center',
//     }}>
//     <Typography.Title level={4}>Select the type of drawing</Typography.Title>
//     <Select
//       defaultValue="mt"
//       onChange={handleChange}
//       options={[
//         { value: 'mt', label: 'Main & Transfer' },
//         { value: 'h', label: 'H-config' },
//         { value: 'bh', label: 'Breaker & a Half' },
//         { value: 'dbsb', label: 'Double Bus Single Breaker' },
//       ]}
//     />
//   </Col>

//   {/* Upload a PDF file*/}
//   <Col
//     span={24}
//     style={{
//       textAlign: 'center',
//     }}>
//     <UploadPDF imageFile={imageFile} setImageFile={setImageFile} />
//   </Col>

//   {/* Send to prediction */}
//   <Col
//     span={6}
//     style={{
//       textAlign: 'center',
//     }}>
//     <PredictJPEG
//       imageFile={imageFile}
//       lineTypes={lineTypes}
//       setLineTypes={setLineTypes}
//       drawingComponents={drawingComponents}
//       setDrawingComponents={setDrawingComponents}
//       missingComponents={missingComponents}
//       setMissingComponents={setMissingComponents}
//       remainingComponents={remainingComponents}
//       setRemainingComponents={setRemainingComponents}
//     />
//   </Col>

//   {/* Display prediction */}
//   <Col
//     span={24}
//     style={{
//       textAlign: 'center',
//     }}>
//     <PredictionTable
//       lineTypes={lineTypes}
//       setLineTypes={setLineTypes}
//       drawingComponents={drawingComponents}
//       setDrawingComponents={setDrawingComponents}
//       missingComponents={missingComponents}
//       setMissingComponents={setMissingComponents}
//       remainingComponents={remainingComponents}
//       setRemainingComponents={setRemainingComponents}
//     />
//   </Col>
// </Row>
